[[0x0000000000000000000000000000000000000000000000000000000000000000, 0x000000000000000000000000000000000000000000000000000000000000013f, 0x000000000000000000000000000000000000000000000000000000000000004a]]

        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x40, mod(calldataload(0x20), f_q))
mstore(0x60, mod(calldataload(0x40), f_q))
mstore(0x0, 9113638792753262385679585429220719991909536724113704096232076029305200586656)

        {
            let x := calldataload(0x60)
            mstore(0x80, x)
            let y := calldataload(0x80)
            mstore(0xa0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xa0)
            mstore(0xc0, x)
            let y := calldataload(0xc0)
            mstore(0xe0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x100, keccak256(0x0, 256))
{
            let hash := mload(0x100)
            mstore(0x120, mod(hash, f_q))
            mstore(0x140, hash)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x160, x)
            let y := calldataload(0x100)
            mstore(0x180, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x120)
            mstore(0x1a0, x)
            let y := calldataload(0x140)
            mstore(0x1c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x160)
            mstore(0x1e0, x)
            let y := calldataload(0x180)
            mstore(0x200, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1a0)
            mstore(0x220, x)
            let y := calldataload(0x1c0)
            mstore(0x240, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x260, x)
            let y := calldataload(0x200)
            mstore(0x280, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x220)
            mstore(0x2a0, x)
            let y := calldataload(0x240)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x2e0, keccak256(0x140, 416))
{
            let hash := mload(0x2e0)
            mstore(0x300, mod(hash, f_q))
            mstore(0x320, hash)
        }
mstore8(832, 1)
mstore(0x340, keccak256(0x320, 33))
{
            let hash := mload(0x340)
            mstore(0x360, mod(hash, f_q))
            mstore(0x380, hash)
        }

        {
            let x := calldataload(0x260)
            mstore(0x3a0, x)
            let y := calldataload(0x280)
            mstore(0x3c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2a0)
            mstore(0x3e0, x)
            let y := calldataload(0x2c0)
            mstore(0x400, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x2e0)
            mstore(0x420, x)
            let y := calldataload(0x300)
            mstore(0x440, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x320)
            mstore(0x460, x)
            let y := calldataload(0x340)
            mstore(0x480, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x360)
            mstore(0x4a0, x)
            let y := calldataload(0x380)
            mstore(0x4c0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x4e0, keccak256(0x380, 352))
{
            let hash := mload(0x4e0)
            mstore(0x500, mod(hash, f_q))
            mstore(0x520, hash)
        }

        {
            let x := calldataload(0x3a0)
            mstore(0x540, x)
            let y := calldataload(0x3c0)
            mstore(0x560, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x3e0)
            mstore(0x580, x)
            let y := calldataload(0x400)
            mstore(0x5a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x420)
            mstore(0x5c0, x)
            let y := calldataload(0x440)
            mstore(0x5e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x460)
            mstore(0x600, x)
            let y := calldataload(0x480)
            mstore(0x620, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x640, keccak256(0x520, 288))
{
            let hash := mload(0x640)
            mstore(0x660, mod(hash, f_q))
            mstore(0x680, hash)
        }
mstore(0x6a0, mod(calldataload(0x4a0), f_q))
mstore(0x6c0, mod(calldataload(0x4c0), f_q))
mstore(0x6e0, mod(calldataload(0x4e0), f_q))
mstore(0x700, mod(calldataload(0x500), f_q))
mstore(0x720, mod(calldataload(0x520), f_q))
mstore(0x740, mod(calldataload(0x540), f_q))
mstore(0x760, mod(calldataload(0x560), f_q))
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, mod(calldataload(0x5e0), f_q))
mstore(0x800, mod(calldataload(0x600), f_q))
mstore(0x820, mod(calldataload(0x620), f_q))
mstore(0x840, mod(calldataload(0x640), f_q))
mstore(0x860, mod(calldataload(0x660), f_q))
mstore(0x880, mod(calldataload(0x680), f_q))
mstore(0x8a0, mod(calldataload(0x6a0), f_q))
mstore(0x8c0, mod(calldataload(0x6c0), f_q))
mstore(0x8e0, mod(calldataload(0x6e0), f_q))
mstore(0x900, mod(calldataload(0x700), f_q))
mstore(0x920, mod(calldataload(0x720), f_q))
mstore(0x940, mod(calldataload(0x740), f_q))
mstore(0x960, mod(calldataload(0x760), f_q))
mstore(0x980, mod(calldataload(0x780), f_q))
mstore(0x9a0, mod(calldataload(0x7a0), f_q))
mstore(0x9c0, mod(calldataload(0x7c0), f_q))
mstore(0x9e0, mod(calldataload(0x7e0), f_q))
mstore(0xa00, mod(calldataload(0x800), f_q))
mstore(0xa20, mod(calldataload(0x820), f_q))
mstore(0xa40, mod(calldataload(0x840), f_q))
mstore(0xa60, mod(calldataload(0x860), f_q))
mstore(0xa80, keccak256(0x680, 1024))
{
            let hash := mload(0xa80)
            mstore(0xaa0, mod(hash, f_q))
            mstore(0xac0, hash)
        }

        {
            let x := calldataload(0x880)
            mstore(0xae0, x)
            let y := calldataload(0x8a0)
            mstore(0xb00, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x8c0)
            mstore(0xb20, x)
            let y := calldataload(0x8e0)
            mstore(0xb40, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x900)
            mstore(0xb60, x)
            let y := calldataload(0x920)
            mstore(0xb80, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x940)
            mstore(0xba0, x)
            let y := calldataload(0x960)
            mstore(0xbc0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xbe0, keccak256(0xac0, 288))
{
            let hash := mload(0xbe0)
            mstore(0xc00, mod(hash, f_q))
            mstore(0xc20, hash)
        }
mstore(0xc40, mulmod(mload(0x660), mload(0x660), f_q))
mstore(0xc60, mulmod(mload(0xc40), mload(0xc40), f_q))
mstore(0xc80, mulmod(mload(0xc60), mload(0xc60), f_q))
mstore(0xca0, mulmod(mload(0xc80), mload(0xc80), f_q))
mstore(0xcc0, mulmod(mload(0xca0), mload(0xca0), f_q))
mstore(0xce0, mulmod(mload(0xcc0), mload(0xcc0), f_q))
mstore(0xd00, mulmod(mload(0xce0), mload(0xce0), f_q))
mstore(0xd20, mulmod(mload(0xd00), mload(0xd00), f_q))
mstore(0xd40, mulmod(mload(0xd20), mload(0xd20), f_q))
mstore(0xd60, mulmod(mload(0xd40), mload(0xd40), f_q))
mstore(0xd80, mulmod(mload(0xd60), mload(0xd60), f_q))
mstore(0xda0, mulmod(mload(0xd80), mload(0xd80), f_q))
mstore(0xdc0, mulmod(mload(0xda0), mload(0xda0), f_q))
mstore(0xde0, mulmod(mload(0xdc0), mload(0xdc0), f_q))
mstore(0xe00, mulmod(mload(0xde0), mload(0xde0), f_q))
mstore(0xe20, mulmod(mload(0xe00), mload(0xe00), f_q))
mstore(0xe40, mulmod(mload(0xe20), mload(0xe20), f_q))
mstore(0xe60, addmod(mload(0xe40), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xe80, mulmod(mload(0xe60), 21888075877798810139885396174900942254113179552665176677420557563313886988289, f_q))
mstore(0xea0, mulmod(mload(0xe80), 18801136258871406524726641978934912926273987048785013233465874845411408769764, f_q))
mstore(0xec0, addmod(mload(0x660), 3087106612967868697519763766322362162274377351631021110232329341164399725853, f_q))
mstore(0xee0, mulmod(mload(0xe80), 13137266746974929847674828718073699700748973485900204084410541910719500618841, f_q))
mstore(0xf00, addmod(mload(0x660), 8750976124864345374571577027183575387799390914515830259287662275856307876776, f_q))
mstore(0xf20, mulmod(mload(0xe80), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q))
mstore(0xf40, addmod(mload(0x660), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q))
mstore(0xf60, mulmod(mload(0xe80), 9798514389911400568976296423560720718971335345616984532185711118739339214189, f_q))
mstore(0xf80, addmod(mload(0x660), 12089728481927874653270109321696554369577029054799049811512493067836469281428, f_q))
mstore(0xfa0, mulmod(mload(0xe80), 5857228514216831962358810454360739186987616060007133076514874820078026801648, f_q))
mstore(0xfc0, addmod(mload(0x660), 16031014357622443259887595290896535901560748340408901267183329366497781693969, f_q))
mstore(0xfe0, mulmod(mload(0xe80), 11402394834529375719535454173347509224290498423785625657829583372803806900475, f_q))
mstore(0x1000, addmod(mload(0x660), 10485848037309899502710951571909765864257865976630408685868620813772001595142, f_q))
mstore(0x1020, mulmod(mload(0xe80), 1, f_q))
mstore(0x1040, addmod(mload(0x660), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0x1060, mulmod(mload(0xe80), 21846745818185811051373434299876022191132089169516983080959277716660228899818, f_q))
mstore(0x1080, addmod(mload(0x660), 41497053653464170872971445381252897416275230899051262738926469915579595799, f_q))
mstore(0x10a0, mulmod(mload(0xe80), 4443263508319656594054352481848447997537391617204595126809744742387004492585, f_q))
mstore(0x10c0, addmod(mload(0x660), 17444979363519618628192053263408827091010972783211439216888459444188804003032, f_q))
{
            let prod := mload(0xec0)

                prod := mulmod(mload(0xf00), prod, f_q)
                mstore(0x10e0, prod)
            
                prod := mulmod(mload(0xf40), prod, f_q)
                mstore(0x1100, prod)
            
                prod := mulmod(mload(0xf80), prod, f_q)
                mstore(0x1120, prod)
            
                prod := mulmod(mload(0xfc0), prod, f_q)
                mstore(0x1140, prod)
            
                prod := mulmod(mload(0x1000), prod, f_q)
                mstore(0x1160, prod)
            
                prod := mulmod(mload(0x1040), prod, f_q)
                mstore(0x1180, prod)
            
                prod := mulmod(mload(0x1080), prod, f_q)
                mstore(0x11a0, prod)
            
                prod := mulmod(mload(0x10c0), prod, f_q)
                mstore(0x11c0, prod)
            
                prod := mulmod(mload(0xe60), prod, f_q)
                mstore(0x11e0, prod)
            
        }
mstore(0x1220, 32)
mstore(0x1240, 32)
mstore(0x1260, 32)
mstore(0x1280, mload(0x11e0))
mstore(0x12a0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0x12c0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0x1220, 0xc0, 0x1200, 0x20), 1), success)
{
            
            let inv := mload(0x1200)
            let v
        
                    v := mload(0xe60)
                    mstore(3680, mulmod(mload(0x11c0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x10c0)
                    mstore(4288, mulmod(mload(0x11a0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1080)
                    mstore(4224, mulmod(mload(0x1180), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1040)
                    mstore(4160, mulmod(mload(0x1160), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0x1000)
                    mstore(4096, mulmod(mload(0x1140), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xfc0)
                    mstore(4032, mulmod(mload(0x1120), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf80)
                    mstore(3968, mulmod(mload(0x1100), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf40)
                    mstore(3904, mulmod(mload(0x10e0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xf00)
                    mstore(3840, mulmod(mload(0xec0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xec0, inv)

        }
mstore(0x12e0, mulmod(mload(0xea0), mload(0xec0), f_q))
mstore(0x1300, mulmod(mload(0xee0), mload(0xf00), f_q))
mstore(0x1320, mulmod(mload(0xf20), mload(0xf40), f_q))
mstore(0x1340, mulmod(mload(0xf60), mload(0xf80), f_q))
mstore(0x1360, mulmod(mload(0xfa0), mload(0xfc0), f_q))
mstore(0x1380, mulmod(mload(0xfe0), mload(0x1000), f_q))
mstore(0x13a0, mulmod(mload(0x1020), mload(0x1040), f_q))
mstore(0x13c0, mulmod(mload(0x1060), mload(0x1080), f_q))
mstore(0x13e0, mulmod(mload(0x10a0), mload(0x10c0), f_q))
{
            let result := mulmod(mload(0x13a0), mload(0x20), f_q)
result := addmod(mulmod(mload(0x13c0), mload(0x40), f_q), result, f_q)
result := addmod(mulmod(mload(0x13e0), mload(0x60), f_q), result, f_q)
mstore(5120, result)
        }
mstore(0x1420, addmod(mload(0x6a0), sub(f_q, mload(0x6c0)), f_q))
mstore(0x1440, mulmod(mload(0x1420), mload(0x7c0), f_q))
mstore(0x1460, mulmod(mload(0x500), mload(0x1440), f_q))
mstore(0x1480, addmod(mload(0x6e0), sub(f_q, mload(0x700)), f_q))
mstore(0x14a0, mulmod(mload(0x1480), mload(0x7c0), f_q))
mstore(0x14c0, addmod(mload(0x1460), mload(0x14a0), f_q))
mstore(0x14e0, mulmod(mload(0x500), mload(0x14c0), f_q))
mstore(0x1500, addmod(mload(0x720), sub(f_q, mload(0x740)), f_q))
mstore(0x1520, mulmod(mload(0x1500), mload(0x7c0), f_q))
mstore(0x1540, addmod(mload(0x14e0), mload(0x1520), f_q))
mstore(0x1560, mulmod(mload(0x500), mload(0x1540), f_q))
mstore(0x1580, addmod(1, sub(f_q, mload(0x860)), f_q))
mstore(0x15a0, mulmod(mload(0x1580), mload(0x13a0), f_q))
mstore(0x15c0, addmod(mload(0x1560), mload(0x15a0), f_q))
mstore(0x15e0, mulmod(mload(0x500), mload(0x15c0), f_q))
mstore(0x1600, mulmod(mload(0x860), mload(0x860), f_q))
mstore(0x1620, addmod(mload(0x1600), sub(f_q, mload(0x860)), f_q))
mstore(0x1640, mulmod(mload(0x1620), mload(0x12e0), f_q))
mstore(0x1660, addmod(mload(0x15e0), mload(0x1640), f_q))
mstore(0x1680, mulmod(mload(0x500), mload(0x1660), f_q))
mstore(0x16a0, addmod(1, sub(f_q, mload(0x12e0)), f_q))
mstore(0x16c0, addmod(mload(0x1300), mload(0x1320), f_q))
mstore(0x16e0, addmod(mload(0x16c0), mload(0x1340), f_q))
mstore(0x1700, addmod(mload(0x16e0), mload(0x1360), f_q))
mstore(0x1720, addmod(mload(0x1700), mload(0x1380), f_q))
mstore(0x1740, addmod(mload(0x16a0), sub(f_q, mload(0x1720)), f_q))
mstore(0x1760, mulmod(mload(0x800), mload(0x300), f_q))
mstore(0x1780, addmod(mload(0x6a0), mload(0x1760), f_q))
mstore(0x17a0, addmod(mload(0x1780), mload(0x360), f_q))
mstore(0x17c0, mulmod(mload(0x820), mload(0x300), f_q))
mstore(0x17e0, addmod(mload(0x6c0), mload(0x17c0), f_q))
mstore(0x1800, addmod(mload(0x17e0), mload(0x360), f_q))
mstore(0x1820, mulmod(mload(0x1800), mload(0x17a0), f_q))
mstore(0x1840, mulmod(mload(0x840), mload(0x300), f_q))
mstore(0x1860, addmod(mload(0x1400), mload(0x1840), f_q))
mstore(0x1880, addmod(mload(0x1860), mload(0x360), f_q))
mstore(0x18a0, mulmod(mload(0x1880), mload(0x1820), f_q))
mstore(0x18c0, mulmod(mload(0x18a0), mload(0x880), f_q))
mstore(0x18e0, mulmod(1, mload(0x300), f_q))
mstore(0x1900, mulmod(mload(0x660), mload(0x18e0), f_q))
mstore(0x1920, addmod(mload(0x6a0), mload(0x1900), f_q))
mstore(0x1940, addmod(mload(0x1920), mload(0x360), f_q))
mstore(0x1960, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x300), f_q))
mstore(0x1980, mulmod(mload(0x660), mload(0x1960), f_q))
mstore(0x19a0, addmod(mload(0x6c0), mload(0x1980), f_q))
mstore(0x19c0, addmod(mload(0x19a0), mload(0x360), f_q))
mstore(0x19e0, mulmod(mload(0x19c0), mload(0x1940), f_q))
mstore(0x1a00, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x300), f_q))
mstore(0x1a20, mulmod(mload(0x660), mload(0x1a00), f_q))
mstore(0x1a40, addmod(mload(0x1400), mload(0x1a20), f_q))
mstore(0x1a60, addmod(mload(0x1a40), mload(0x360), f_q))
mstore(0x1a80, mulmod(mload(0x1a60), mload(0x19e0), f_q))
mstore(0x1aa0, mulmod(mload(0x1a80), mload(0x860), f_q))
mstore(0x1ac0, addmod(mload(0x18c0), sub(f_q, mload(0x1aa0)), f_q))
mstore(0x1ae0, mulmod(mload(0x1ac0), mload(0x1740), f_q))
mstore(0x1b00, addmod(mload(0x1680), mload(0x1ae0), f_q))
mstore(0x1b20, mulmod(mload(0x500), mload(0x1b00), f_q))
mstore(0x1b40, addmod(1, sub(f_q, mload(0x8a0)), f_q))
mstore(0x1b60, mulmod(mload(0x1b40), mload(0x13a0), f_q))
mstore(0x1b80, addmod(mload(0x1b20), mload(0x1b60), f_q))
mstore(0x1ba0, mulmod(mload(0x500), mload(0x1b80), f_q))
mstore(0x1bc0, mulmod(mload(0x8a0), mload(0x8a0), f_q))
mstore(0x1be0, addmod(mload(0x1bc0), sub(f_q, mload(0x8a0)), f_q))
mstore(0x1c00, mulmod(mload(0x1be0), mload(0x12e0), f_q))
mstore(0x1c20, addmod(mload(0x1ba0), mload(0x1c00), f_q))
mstore(0x1c40, mulmod(mload(0x500), mload(0x1c20), f_q))
mstore(0x1c60, addmod(mload(0x8e0), mload(0x300), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x8c0), f_q))
mstore(0x1ca0, addmod(mload(0x920), mload(0x360), f_q))
mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x1c80), f_q))
mstore(0x1ce0, mulmod(mload(0x6a0), mload(0x7a0), f_q))
mstore(0x1d00, addmod(1, sub(f_q, mload(0x7a0)), f_q))
mstore(0x1d20, mulmod(mload(0x1d00), 0, f_q))
mstore(0x1d40, addmod(mload(0x1ce0), mload(0x1d20), f_q))
mstore(0x1d60, mulmod(mload(0x120), mload(0x1d40), f_q))
mstore(0x1d80, mulmod(mload(0x6c0), mload(0x7a0), f_q))
mstore(0x1da0, addmod(mload(0x1d80), mload(0x1d20), f_q))
mstore(0x1dc0, addmod(mload(0x1d60), mload(0x1da0), f_q))
mstore(0x1de0, addmod(mload(0x1dc0), mload(0x300), f_q))
mstore(0x1e00, mulmod(mload(0x1de0), mload(0x8a0), f_q))
mstore(0x1e20, mulmod(mload(0x120), mload(0x760), f_q))
mstore(0x1e40, addmod(mload(0x1e20), mload(0x780), f_q))
mstore(0x1e60, addmod(mload(0x1e40), mload(0x360), f_q))
mstore(0x1e80, mulmod(mload(0x1e60), mload(0x1e00), f_q))
mstore(0x1ea0, addmod(mload(0x1cc0), sub(f_q, mload(0x1e80)), f_q))
mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x1740), f_q))
mstore(0x1ee0, addmod(mload(0x1c40), mload(0x1ec0), f_q))
mstore(0x1f00, mulmod(mload(0x500), mload(0x1ee0), f_q))
mstore(0x1f20, addmod(mload(0x8e0), sub(f_q, mload(0x920)), f_q))
mstore(0x1f40, mulmod(mload(0x1f20), mload(0x13a0), f_q))
mstore(0x1f60, addmod(mload(0x1f00), mload(0x1f40), f_q))
mstore(0x1f80, mulmod(mload(0x500), mload(0x1f60), f_q))
mstore(0x1fa0, mulmod(mload(0x1f20), mload(0x1740), f_q))
mstore(0x1fc0, addmod(mload(0x8e0), sub(f_q, mload(0x900)), f_q))
mstore(0x1fe0, mulmod(mload(0x1fc0), mload(0x1fa0), f_q))
mstore(0x2000, addmod(mload(0x1f80), mload(0x1fe0), f_q))
mstore(0x2020, mulmod(mload(0x500), mload(0x2000), f_q))
mstore(0x2040, addmod(1, sub(f_q, mload(0x940)), f_q))
mstore(0x2060, mulmod(mload(0x2040), mload(0x13a0), f_q))
mstore(0x2080, addmod(mload(0x2020), mload(0x2060), f_q))
mstore(0x20a0, mulmod(mload(0x500), mload(0x2080), f_q))
mstore(0x20c0, mulmod(mload(0x940), mload(0x940), f_q))
mstore(0x20e0, addmod(mload(0x20c0), sub(f_q, mload(0x940)), f_q))
mstore(0x2100, mulmod(mload(0x20e0), mload(0x12e0), f_q))
mstore(0x2120, addmod(mload(0x20a0), mload(0x2100), f_q))
mstore(0x2140, mulmod(mload(0x500), mload(0x2120), f_q))
mstore(0x2160, addmod(mload(0x980), mload(0x300), f_q))
mstore(0x2180, mulmod(mload(0x2160), mload(0x960), f_q))
mstore(0x21a0, addmod(mload(0x9c0), mload(0x360), f_q))
mstore(0x21c0, mulmod(mload(0x21a0), mload(0x2180), f_q))
mstore(0x21e0, mulmod(mload(0x6e0), mload(0x7a0), f_q))
mstore(0x2200, addmod(mload(0x21e0), mload(0x1d20), f_q))
mstore(0x2220, mulmod(mload(0x120), mload(0x2200), f_q))
mstore(0x2240, mulmod(mload(0x700), mload(0x7a0), f_q))
mstore(0x2260, addmod(mload(0x2240), mload(0x1d20), f_q))
mstore(0x2280, addmod(mload(0x2220), mload(0x2260), f_q))
mstore(0x22a0, addmod(mload(0x2280), mload(0x300), f_q))
mstore(0x22c0, mulmod(mload(0x22a0), mload(0x940), f_q))
mstore(0x22e0, mulmod(mload(0x1e60), mload(0x22c0), f_q))
mstore(0x2300, addmod(mload(0x21c0), sub(f_q, mload(0x22e0)), f_q))
mstore(0x2320, mulmod(mload(0x2300), mload(0x1740), f_q))
mstore(0x2340, addmod(mload(0x2140), mload(0x2320), f_q))
mstore(0x2360, mulmod(mload(0x500), mload(0x2340), f_q))
mstore(0x2380, addmod(mload(0x980), sub(f_q, mload(0x9c0)), f_q))
mstore(0x23a0, mulmod(mload(0x2380), mload(0x13a0), f_q))
mstore(0x23c0, addmod(mload(0x2360), mload(0x23a0), f_q))
mstore(0x23e0, mulmod(mload(0x500), mload(0x23c0), f_q))
mstore(0x2400, mulmod(mload(0x2380), mload(0x1740), f_q))
mstore(0x2420, addmod(mload(0x980), sub(f_q, mload(0x9a0)), f_q))
mstore(0x2440, mulmod(mload(0x2420), mload(0x2400), f_q))
mstore(0x2460, addmod(mload(0x23e0), mload(0x2440), f_q))
mstore(0x2480, mulmod(mload(0x500), mload(0x2460), f_q))
mstore(0x24a0, addmod(1, sub(f_q, mload(0x9e0)), f_q))
mstore(0x24c0, mulmod(mload(0x24a0), mload(0x13a0), f_q))
mstore(0x24e0, addmod(mload(0x2480), mload(0x24c0), f_q))
mstore(0x2500, mulmod(mload(0x500), mload(0x24e0), f_q))
mstore(0x2520, mulmod(mload(0x9e0), mload(0x9e0), f_q))
mstore(0x2540, addmod(mload(0x2520), sub(f_q, mload(0x9e0)), f_q))
mstore(0x2560, mulmod(mload(0x2540), mload(0x12e0), f_q))
mstore(0x2580, addmod(mload(0x2500), mload(0x2560), f_q))
mstore(0x25a0, mulmod(mload(0x500), mload(0x2580), f_q))
mstore(0x25c0, addmod(mload(0xa20), mload(0x300), f_q))
mstore(0x25e0, mulmod(mload(0x25c0), mload(0xa00), f_q))
mstore(0x2600, addmod(mload(0xa60), mload(0x360), f_q))
mstore(0x2620, mulmod(mload(0x2600), mload(0x25e0), f_q))
mstore(0x2640, mulmod(mload(0x720), mload(0x7a0), f_q))
mstore(0x2660, addmod(mload(0x2640), mload(0x1d20), f_q))
mstore(0x2680, mulmod(mload(0x120), mload(0x2660), f_q))
mstore(0x26a0, mulmod(mload(0x740), mload(0x7a0), f_q))
mstore(0x26c0, addmod(mload(0x26a0), mload(0x1d20), f_q))
mstore(0x26e0, addmod(mload(0x2680), mload(0x26c0), f_q))
mstore(0x2700, addmod(mload(0x26e0), mload(0x300), f_q))
mstore(0x2720, mulmod(mload(0x2700), mload(0x9e0), f_q))
mstore(0x2740, mulmod(mload(0x1e60), mload(0x2720), f_q))
mstore(0x2760, addmod(mload(0x2620), sub(f_q, mload(0x2740)), f_q))
mstore(0x2780, mulmod(mload(0x2760), mload(0x1740), f_q))
mstore(0x27a0, addmod(mload(0x25a0), mload(0x2780), f_q))
mstore(0x27c0, mulmod(mload(0x500), mload(0x27a0), f_q))
mstore(0x27e0, addmod(mload(0xa20), sub(f_q, mload(0xa60)), f_q))
mstore(0x2800, mulmod(mload(0x27e0), mload(0x13a0), f_q))
mstore(0x2820, addmod(mload(0x27c0), mload(0x2800), f_q))
mstore(0x2840, mulmod(mload(0x500), mload(0x2820), f_q))
mstore(0x2860, mulmod(mload(0x27e0), mload(0x1740), f_q))
mstore(0x2880, addmod(mload(0xa20), sub(f_q, mload(0xa40)), f_q))
mstore(0x28a0, mulmod(mload(0x2880), mload(0x2860), f_q))
mstore(0x28c0, addmod(mload(0x2840), mload(0x28a0), f_q))
mstore(0x28e0, mulmod(mload(0xe40), mload(0xe40), f_q))
mstore(0x2900, mulmod(mload(0x28e0), mload(0xe40), f_q))
mstore(0x2920, mulmod(mload(0x2900), mload(0xe40), f_q))
mstore(0x2940, mulmod(1, mload(0xe40), f_q))
mstore(0x2960, mulmod(1, mload(0x28e0), f_q))
mstore(0x2980, mulmod(1, mload(0x2900), f_q))
mstore(0x29a0, mulmod(mload(0x28c0), mload(0xe60), f_q))
mstore(0x29c0, mulmod(mload(0xc00), mload(0xc00), f_q))
mstore(0x29e0, mulmod(mload(0x29c0), mload(0xc00), f_q))
mstore(0x2a00, mulmod(mload(0x29e0), mload(0xc00), f_q))
mstore(0x2a20, mulmod(mload(0xaa0), mload(0xaa0), f_q))
mstore(0x2a40, mulmod(mload(0x2a20), mload(0xaa0), f_q))
mstore(0x2a60, mulmod(mload(0x2a40), mload(0xaa0), f_q))
mstore(0x2a80, mulmod(mload(0x2a60), mload(0xaa0), f_q))
mstore(0x2aa0, mulmod(mload(0x2a80), mload(0xaa0), f_q))
mstore(0x2ac0, mulmod(mload(0x2aa0), mload(0xaa0), f_q))
mstore(0x2ae0, mulmod(mload(0x2ac0), mload(0xaa0), f_q))
mstore(0x2b00, mulmod(mload(0x2ae0), mload(0xaa0), f_q))
mstore(0x2b20, mulmod(mload(0x2b00), mload(0xaa0), f_q))
mstore(0x2b40, mulmod(mload(0x2b20), mload(0xaa0), f_q))
mstore(0x2b60, mulmod(mload(0x2b40), mload(0xaa0), f_q))
mstore(0x2b80, mulmod(mload(0x2b60), mload(0xaa0), f_q))
mstore(0x2ba0, mulmod(mload(0x2b80), mload(0xaa0), f_q))
mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0xaa0), f_q))
mstore(0x2be0, mulmod(mload(0x2bc0), mload(0xaa0), f_q))
mstore(0x2c00, mulmod(mload(0x2be0), mload(0xaa0), f_q))
mstore(0x2c20, mulmod(mload(0x2c00), mload(0xaa0), f_q))
mstore(0x2c40, mulmod(mload(0x2c20), mload(0xaa0), f_q))
mstore(0x2c60, mulmod(mload(0x2c40), mload(0xaa0), f_q))
mstore(0x2c80, mulmod(mload(0x2c60), mload(0xaa0), f_q))
mstore(0x2ca0, mulmod(sub(f_q, mload(0x6a0)), 1, f_q))
mstore(0x2cc0, mulmod(sub(f_q, mload(0x6c0)), mload(0xaa0), f_q))
mstore(0x2ce0, mulmod(1, mload(0xaa0), f_q))
mstore(0x2d00, addmod(mload(0x2ca0), mload(0x2cc0), f_q))
mstore(0x2d20, mulmod(sub(f_q, mload(0x860)), mload(0x2a20), f_q))
mstore(0x2d40, mulmod(1, mload(0x2a20), f_q))
mstore(0x2d60, addmod(mload(0x2d00), mload(0x2d20), f_q))
mstore(0x2d80, mulmod(sub(f_q, mload(0x8a0)), mload(0x2a40), f_q))
mstore(0x2da0, mulmod(1, mload(0x2a40), f_q))
mstore(0x2dc0, addmod(mload(0x2d60), mload(0x2d80), f_q))
mstore(0x2de0, mulmod(sub(f_q, mload(0x8e0)), mload(0x2a60), f_q))
mstore(0x2e00, mulmod(1, mload(0x2a60), f_q))
mstore(0x2e20, addmod(mload(0x2dc0), mload(0x2de0), f_q))
mstore(0x2e40, mulmod(sub(f_q, mload(0x920)), mload(0x2a80), f_q))
mstore(0x2e60, mulmod(1, mload(0x2a80), f_q))
mstore(0x2e80, addmod(mload(0x2e20), mload(0x2e40), f_q))
mstore(0x2ea0, mulmod(sub(f_q, mload(0x940)), mload(0x2aa0), f_q))
mstore(0x2ec0, mulmod(1, mload(0x2aa0), f_q))
mstore(0x2ee0, addmod(mload(0x2e80), mload(0x2ea0), f_q))
mstore(0x2f00, mulmod(sub(f_q, mload(0x980)), mload(0x2ac0), f_q))
mstore(0x2f20, mulmod(1, mload(0x2ac0), f_q))
mstore(0x2f40, addmod(mload(0x2ee0), mload(0x2f00), f_q))
mstore(0x2f60, mulmod(sub(f_q, mload(0x9c0)), mload(0x2ae0), f_q))
mstore(0x2f80, mulmod(1, mload(0x2ae0), f_q))
mstore(0x2fa0, addmod(mload(0x2f40), mload(0x2f60), f_q))
mstore(0x2fc0, mulmod(sub(f_q, mload(0x9e0)), mload(0x2b00), f_q))
mstore(0x2fe0, mulmod(1, mload(0x2b00), f_q))
mstore(0x3000, addmod(mload(0x2fa0), mload(0x2fc0), f_q))
mstore(0x3020, mulmod(sub(f_q, mload(0xa20)), mload(0x2b20), f_q))
mstore(0x3040, mulmod(1, mload(0x2b20), f_q))
mstore(0x3060, addmod(mload(0x3000), mload(0x3020), f_q))
mstore(0x3080, mulmod(sub(f_q, mload(0xa60)), mload(0x2b40), f_q))
mstore(0x30a0, mulmod(1, mload(0x2b40), f_q))
mstore(0x30c0, addmod(mload(0x3060), mload(0x3080), f_q))
mstore(0x30e0, mulmod(sub(f_q, mload(0x760)), mload(0x2b60), f_q))
mstore(0x3100, mulmod(1, mload(0x2b60), f_q))
mstore(0x3120, addmod(mload(0x30c0), mload(0x30e0), f_q))
mstore(0x3140, mulmod(sub(f_q, mload(0x780)), mload(0x2b80), f_q))
mstore(0x3160, mulmod(1, mload(0x2b80), f_q))
mstore(0x3180, addmod(mload(0x3120), mload(0x3140), f_q))
mstore(0x31a0, mulmod(sub(f_q, mload(0x7a0)), mload(0x2ba0), f_q))
mstore(0x31c0, mulmod(1, mload(0x2ba0), f_q))
mstore(0x31e0, addmod(mload(0x3180), mload(0x31a0), f_q))
mstore(0x3200, mulmod(sub(f_q, mload(0x7c0)), mload(0x2bc0), f_q))
mstore(0x3220, mulmod(1, mload(0x2bc0), f_q))
mstore(0x3240, addmod(mload(0x31e0), mload(0x3200), f_q))
mstore(0x3260, mulmod(sub(f_q, mload(0x800)), mload(0x2be0), f_q))
mstore(0x3280, mulmod(1, mload(0x2be0), f_q))
mstore(0x32a0, addmod(mload(0x3240), mload(0x3260), f_q))
mstore(0x32c0, mulmod(sub(f_q, mload(0x820)), mload(0x2c00), f_q))
mstore(0x32e0, mulmod(1, mload(0x2c00), f_q))
mstore(0x3300, addmod(mload(0x32a0), mload(0x32c0), f_q))
mstore(0x3320, mulmod(sub(f_q, mload(0x840)), mload(0x2c20), f_q))
mstore(0x3340, mulmod(1, mload(0x2c20), f_q))
mstore(0x3360, addmod(mload(0x3300), mload(0x3320), f_q))
mstore(0x3380, mulmod(sub(f_q, mload(0x29a0)), mload(0x2c40), f_q))
mstore(0x33a0, mulmod(1, mload(0x2c40), f_q))
mstore(0x33c0, mulmod(mload(0x2940), mload(0x2c40), f_q))
mstore(0x33e0, mulmod(mload(0x2960), mload(0x2c40), f_q))
mstore(0x3400, mulmod(mload(0x2980), mload(0x2c40), f_q))
mstore(0x3420, addmod(mload(0x3360), mload(0x3380), f_q))
mstore(0x3440, mulmod(sub(f_q, mload(0x7e0)), mload(0x2c60), f_q))
mstore(0x3460, mulmod(1, mload(0x2c60), f_q))
mstore(0x3480, addmod(mload(0x3420), mload(0x3440), f_q))
mstore(0x34a0, mulmod(mload(0x3480), 1, f_q))
mstore(0x34c0, mulmod(mload(0x2ce0), 1, f_q))
mstore(0x34e0, mulmod(mload(0x2d40), 1, f_q))
mstore(0x3500, mulmod(mload(0x2da0), 1, f_q))
mstore(0x3520, mulmod(mload(0x2e00), 1, f_q))
mstore(0x3540, mulmod(mload(0x2e60), 1, f_q))
mstore(0x3560, mulmod(mload(0x2ec0), 1, f_q))
mstore(0x3580, mulmod(mload(0x2f20), 1, f_q))
mstore(0x35a0, mulmod(mload(0x2f80), 1, f_q))
mstore(0x35c0, mulmod(mload(0x2fe0), 1, f_q))
mstore(0x35e0, mulmod(mload(0x3040), 1, f_q))
mstore(0x3600, mulmod(mload(0x30a0), 1, f_q))
mstore(0x3620, mulmod(mload(0x3100), 1, f_q))
mstore(0x3640, mulmod(mload(0x3160), 1, f_q))
mstore(0x3660, mulmod(mload(0x31c0), 1, f_q))
mstore(0x3680, mulmod(mload(0x3220), 1, f_q))
mstore(0x36a0, mulmod(mload(0x3280), 1, f_q))
mstore(0x36c0, mulmod(mload(0x32e0), 1, f_q))
mstore(0x36e0, mulmod(mload(0x3340), 1, f_q))
mstore(0x3700, mulmod(mload(0x33a0), 1, f_q))
mstore(0x3720, mulmod(mload(0x33c0), 1, f_q))
mstore(0x3740, mulmod(mload(0x33e0), 1, f_q))
mstore(0x3760, mulmod(mload(0x3400), 1, f_q))
mstore(0x3780, mulmod(mload(0x3460), 1, f_q))
mstore(0x37a0, mulmod(sub(f_q, mload(0x6e0)), 1, f_q))
mstore(0x37c0, mulmod(sub(f_q, mload(0x700)), mload(0xaa0), f_q))
mstore(0x37e0, addmod(mload(0x37a0), mload(0x37c0), f_q))
mstore(0x3800, mulmod(sub(f_q, mload(0x880)), mload(0x2a20), f_q))
mstore(0x3820, addmod(mload(0x37e0), mload(0x3800), f_q))
mstore(0x3840, mulmod(sub(f_q, mload(0x8c0)), mload(0x2a40), f_q))
mstore(0x3860, addmod(mload(0x3820), mload(0x3840), f_q))
mstore(0x3880, mulmod(sub(f_q, mload(0x960)), mload(0x2a60), f_q))
mstore(0x38a0, addmod(mload(0x3860), mload(0x3880), f_q))
mstore(0x38c0, mulmod(sub(f_q, mload(0xa00)), mload(0x2a80), f_q))
mstore(0x38e0, addmod(mload(0x38a0), mload(0x38c0), f_q))
mstore(0x3900, mulmod(mload(0x38e0), mload(0xc00), f_q))
mstore(0x3920, mulmod(1, mload(0xc00), f_q))
mstore(0x3940, mulmod(mload(0x2ce0), mload(0xc00), f_q))
mstore(0x3960, mulmod(mload(0x2d40), mload(0xc00), f_q))
mstore(0x3980, mulmod(mload(0x2da0), mload(0xc00), f_q))
mstore(0x39a0, mulmod(mload(0x2e00), mload(0xc00), f_q))
mstore(0x39c0, mulmod(mload(0x2e60), mload(0xc00), f_q))
mstore(0x39e0, addmod(mload(0x34a0), mload(0x3900), f_q))
mstore(0x3a00, addmod(1, mload(0x3920), f_q))
mstore(0x3a20, addmod(mload(0x34c0), mload(0x3940), f_q))
mstore(0x3a40, addmod(mload(0x34e0), mload(0x3960), f_q))
mstore(0x3a60, addmod(mload(0x3500), mload(0x3980), f_q))
mstore(0x3a80, addmod(mload(0x3560), mload(0x39a0), f_q))
mstore(0x3aa0, addmod(mload(0x35c0), mload(0x39c0), f_q))
mstore(0x3ac0, mulmod(sub(f_q, mload(0x720)), 1, f_q))
mstore(0x3ae0, mulmod(sub(f_q, mload(0x740)), mload(0xaa0), f_q))
mstore(0x3b00, addmod(mload(0x3ac0), mload(0x3ae0), f_q))
mstore(0x3b20, mulmod(mload(0x3b00), mload(0x29c0), f_q))
mstore(0x3b40, mulmod(1, mload(0x29c0), f_q))
mstore(0x3b60, mulmod(mload(0x2ce0), mload(0x29c0), f_q))
mstore(0x3b80, addmod(mload(0x39e0), mload(0x3b20), f_q))
mstore(0x3ba0, addmod(mload(0x3a00), mload(0x3b40), f_q))
mstore(0x3bc0, addmod(mload(0x3a20), mload(0x3b60), f_q))
mstore(0x3be0, mulmod(sub(f_q, mload(0x900)), 1, f_q))
mstore(0x3c00, mulmod(sub(f_q, mload(0x9a0)), mload(0xaa0), f_q))
mstore(0x3c20, addmod(mload(0x3be0), mload(0x3c00), f_q))
mstore(0x3c40, mulmod(sub(f_q, mload(0xa40)), mload(0x2a20), f_q))
mstore(0x3c60, addmod(mload(0x3c20), mload(0x3c40), f_q))
mstore(0x3c80, mulmod(mload(0x3c60), mload(0x29e0), f_q))
mstore(0x3ca0, mulmod(1, mload(0x29e0), f_q))
mstore(0x3cc0, mulmod(mload(0x2ce0), mload(0x29e0), f_q))
mstore(0x3ce0, mulmod(mload(0x2d40), mload(0x29e0), f_q))
mstore(0x3d00, addmod(mload(0x3b80), mload(0x3c80), f_q))
mstore(0x3d20, addmod(mload(0x3520), mload(0x3ca0), f_q))
mstore(0x3d40, addmod(mload(0x3580), mload(0x3cc0), f_q))
mstore(0x3d60, addmod(mload(0x35e0), mload(0x3ce0), f_q))
mstore(0x3d80, mulmod(1, mload(0x660), f_q))
mstore(0x3da0, mulmod(1, mload(0x3d80), f_q))
mstore(0x3dc0, mulmod(21846745818185811051373434299876022191132089169516983080959277716660228899818, mload(0x660), f_q))
mstore(0x3de0, mulmod(mload(0x3920), mload(0x3dc0), f_q))
mstore(0x3e00, mulmod(4443263508319656594054352481848447997537391617204595126809744742387004492585, mload(0x660), f_q))
mstore(0x3e20, mulmod(mload(0x3b40), mload(0x3e00), f_q))
mstore(0x3e40, mulmod(11402394834529375719535454173347509224290498423785625657829583372803806900475, mload(0x660), f_q))
mstore(0x3e60, mulmod(mload(0x3ca0), mload(0x3e40), f_q))
mstore(0x3e80, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x3ea0, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x3ec0, mload(0x3d00))
success := and(eq(staticcall(gas(), 0x7, 0x3e80, 0x60, 0x3e80, 0x40), 1), success)
mstore(0x3ee0, mload(0x80))
                    mstore(0x3f00, mload(0xa0))
mstore(0x3f20, mload(0x3ba0))
success := and(eq(staticcall(gas(), 0x7, 0x3ee0, 0x60, 0x3ee0, 0x40), 1), success)
mstore(0x3f40, mload(0x3e80))
                    mstore(0x3f60, mload(0x3ea0))
mstore(0x3f80, mload(0x3ee0))
                    mstore(0x3fa0, mload(0x3f00))
success := and(eq(staticcall(gas(), 0x6, 0x3f40, 0x80, 0x3f40, 0x40), 1), success)
mstore(0x3fc0, mload(0xc0))
                    mstore(0x3fe0, mload(0xe0))
mstore(0x4000, mload(0x3bc0))
success := and(eq(staticcall(gas(), 0x7, 0x3fc0, 0x60, 0x3fc0, 0x40), 1), success)
mstore(0x4020, mload(0x3f40))
                    mstore(0x4040, mload(0x3f60))
mstore(0x4060, mload(0x3fc0))
                    mstore(0x4080, mload(0x3fe0))
success := and(eq(staticcall(gas(), 0x6, 0x4020, 0x80, 0x4020, 0x40), 1), success)
mstore(0x40a0, mload(0x3a0))
                    mstore(0x40c0, mload(0x3c0))
mstore(0x40e0, mload(0x3a40))
success := and(eq(staticcall(gas(), 0x7, 0x40a0, 0x60, 0x40a0, 0x40), 1), success)
mstore(0x4100, mload(0x4020))
                    mstore(0x4120, mload(0x4040))
mstore(0x4140, mload(0x40a0))
                    mstore(0x4160, mload(0x40c0))
success := and(eq(staticcall(gas(), 0x6, 0x4100, 0x80, 0x4100, 0x40), 1), success)
mstore(0x4180, mload(0x3e0))
                    mstore(0x41a0, mload(0x400))
mstore(0x41c0, mload(0x3a60))
success := and(eq(staticcall(gas(), 0x7, 0x4180, 0x60, 0x4180, 0x40), 1), success)
mstore(0x41e0, mload(0x4100))
                    mstore(0x4200, mload(0x4120))
mstore(0x4220, mload(0x4180))
                    mstore(0x4240, mload(0x41a0))
success := and(eq(staticcall(gas(), 0x6, 0x41e0, 0x80, 0x41e0, 0x40), 1), success)
mstore(0x4260, mload(0x160))
                    mstore(0x4280, mload(0x180))
mstore(0x42a0, mload(0x3d20))
success := and(eq(staticcall(gas(), 0x7, 0x4260, 0x60, 0x4260, 0x40), 1), success)
mstore(0x42c0, mload(0x41e0))
                    mstore(0x42e0, mload(0x4200))
mstore(0x4300, mload(0x4260))
                    mstore(0x4320, mload(0x4280))
success := and(eq(staticcall(gas(), 0x6, 0x42c0, 0x80, 0x42c0, 0x40), 1), success)
mstore(0x4340, mload(0x1a0))
                    mstore(0x4360, mload(0x1c0))
mstore(0x4380, mload(0x3540))
success := and(eq(staticcall(gas(), 0x7, 0x4340, 0x60, 0x4340, 0x40), 1), success)
mstore(0x43a0, mload(0x42c0))
                    mstore(0x43c0, mload(0x42e0))
mstore(0x43e0, mload(0x4340))
                    mstore(0x4400, mload(0x4360))
success := and(eq(staticcall(gas(), 0x6, 0x43a0, 0x80, 0x43a0, 0x40), 1), success)
mstore(0x4420, mload(0x420))
                    mstore(0x4440, mload(0x440))
mstore(0x4460, mload(0x3a80))
success := and(eq(staticcall(gas(), 0x7, 0x4420, 0x60, 0x4420, 0x40), 1), success)
mstore(0x4480, mload(0x43a0))
                    mstore(0x44a0, mload(0x43c0))
mstore(0x44c0, mload(0x4420))
                    mstore(0x44e0, mload(0x4440))
success := and(eq(staticcall(gas(), 0x6, 0x4480, 0x80, 0x4480, 0x40), 1), success)
mstore(0x4500, mload(0x1e0))
                    mstore(0x4520, mload(0x200))
mstore(0x4540, mload(0x3d40))
success := and(eq(staticcall(gas(), 0x7, 0x4500, 0x60, 0x4500, 0x40), 1), success)
mstore(0x4560, mload(0x4480))
                    mstore(0x4580, mload(0x44a0))
mstore(0x45a0, mload(0x4500))
                    mstore(0x45c0, mload(0x4520))
success := and(eq(staticcall(gas(), 0x6, 0x4560, 0x80, 0x4560, 0x40), 1), success)
mstore(0x45e0, mload(0x220))
                    mstore(0x4600, mload(0x240))
mstore(0x4620, mload(0x35a0))
success := and(eq(staticcall(gas(), 0x7, 0x45e0, 0x60, 0x45e0, 0x40), 1), success)
mstore(0x4640, mload(0x4560))
                    mstore(0x4660, mload(0x4580))
mstore(0x4680, mload(0x45e0))
                    mstore(0x46a0, mload(0x4600))
success := and(eq(staticcall(gas(), 0x6, 0x4640, 0x80, 0x4640, 0x40), 1), success)
mstore(0x46c0, mload(0x460))
                    mstore(0x46e0, mload(0x480))
mstore(0x4700, mload(0x3aa0))
success := and(eq(staticcall(gas(), 0x7, 0x46c0, 0x60, 0x46c0, 0x40), 1), success)
mstore(0x4720, mload(0x4640))
                    mstore(0x4740, mload(0x4660))
mstore(0x4760, mload(0x46c0))
                    mstore(0x4780, mload(0x46e0))
success := and(eq(staticcall(gas(), 0x6, 0x4720, 0x80, 0x4720, 0x40), 1), success)
mstore(0x47a0, mload(0x260))
                    mstore(0x47c0, mload(0x280))
mstore(0x47e0, mload(0x3d60))
success := and(eq(staticcall(gas(), 0x7, 0x47a0, 0x60, 0x47a0, 0x40), 1), success)
mstore(0x4800, mload(0x4720))
                    mstore(0x4820, mload(0x4740))
mstore(0x4840, mload(0x47a0))
                    mstore(0x4860, mload(0x47c0))
success := and(eq(staticcall(gas(), 0x6, 0x4800, 0x80, 0x4800, 0x40), 1), success)
mstore(0x4880, mload(0x2a0))
                    mstore(0x48a0, mload(0x2c0))
mstore(0x48c0, mload(0x3600))
success := and(eq(staticcall(gas(), 0x7, 0x4880, 0x60, 0x4880, 0x40), 1), success)
mstore(0x48e0, mload(0x4800))
                    mstore(0x4900, mload(0x4820))
mstore(0x4920, mload(0x4880))
                    mstore(0x4940, mload(0x48a0))
success := and(eq(staticcall(gas(), 0x6, 0x48e0, 0x80, 0x48e0, 0x40), 1), success)
mstore(0x4960, 0x0d345bf24c7c7ee6503cf7724506ea41c655829a9cfb27e7fc43367d499a4c4d)
                    mstore(0x4980, 0x10fbf8b7fb737e677c7f1a02cc4c88a21013f9073168f940b4464000ea79c4d7)
mstore(0x49a0, mload(0x3620))
success := and(eq(staticcall(gas(), 0x7, 0x4960, 0x60, 0x4960, 0x40), 1), success)
mstore(0x49c0, mload(0x48e0))
                    mstore(0x49e0, mload(0x4900))
mstore(0x4a00, mload(0x4960))
                    mstore(0x4a20, mload(0x4980))
success := and(eq(staticcall(gas(), 0x6, 0x49c0, 0x80, 0x49c0, 0x40), 1), success)
mstore(0x4a40, 0x193e8ce3799089371e4cd6181fb78a14e2ae47351c43191b3751c7dd01931f5e)
                    mstore(0x4a60, 0x12daacccc7f5a7e69ad1d4b8f8823ac350974ef5ad3b674fe42d3d3ad45f9c73)
mstore(0x4a80, mload(0x3640))
success := and(eq(staticcall(gas(), 0x7, 0x4a40, 0x60, 0x4a40, 0x40), 1), success)
mstore(0x4aa0, mload(0x49c0))
                    mstore(0x4ac0, mload(0x49e0))
mstore(0x4ae0, mload(0x4a40))
                    mstore(0x4b00, mload(0x4a60))
success := and(eq(staticcall(gas(), 0x6, 0x4aa0, 0x80, 0x4aa0, 0x40), 1), success)
mstore(0x4b20, 0x065d87f2c8085c8db7b2b2b8d1007faa5565525b662e8cd15cad638215bdbd25)
                    mstore(0x4b40, 0x10f916190f83458bf5302db3fa682d2786d822dec1c79332fff45a1728f2bcb3)
mstore(0x4b60, mload(0x3660))
success := and(eq(staticcall(gas(), 0x7, 0x4b20, 0x60, 0x4b20, 0x40), 1), success)
mstore(0x4b80, mload(0x4aa0))
                    mstore(0x4ba0, mload(0x4ac0))
mstore(0x4bc0, mload(0x4b20))
                    mstore(0x4be0, mload(0x4b40))
success := and(eq(staticcall(gas(), 0x6, 0x4b80, 0x80, 0x4b80, 0x40), 1), success)
mstore(0x4c00, 0x10046efba77d44b875f2a1e87ea3f925fafc53e78fd7e71ac256bbc7332ab434)
                    mstore(0x4c20, 0x2cbda0afe005adbb50f316c703a8bd8f52f7a7ec560b2de1bd93f30e388bdcd8)
mstore(0x4c40, mload(0x3680))
success := and(eq(staticcall(gas(), 0x7, 0x4c00, 0x60, 0x4c00, 0x40), 1), success)
mstore(0x4c60, mload(0x4b80))
                    mstore(0x4c80, mload(0x4ba0))
mstore(0x4ca0, mload(0x4c00))
                    mstore(0x4cc0, mload(0x4c20))
success := and(eq(staticcall(gas(), 0x6, 0x4c60, 0x80, 0x4c60, 0x40), 1), success)
mstore(0x4ce0, 0x053c22a07b6a0cb755517a19289e3c56f79b7cf7c369a9401aa29d09ca0591db)
                    mstore(0x4d00, 0x0d00f556b7590113cca330503a06256bed31e2f8ec2b75b6a6ace0642dc4dc57)
mstore(0x4d20, mload(0x36a0))
success := and(eq(staticcall(gas(), 0x7, 0x4ce0, 0x60, 0x4ce0, 0x40), 1), success)
mstore(0x4d40, mload(0x4c60))
                    mstore(0x4d60, mload(0x4c80))
mstore(0x4d80, mload(0x4ce0))
                    mstore(0x4da0, mload(0x4d00))
success := and(eq(staticcall(gas(), 0x6, 0x4d40, 0x80, 0x4d40, 0x40), 1), success)
mstore(0x4dc0, 0x25cea9ab0b36d4f8814acb686151ad8c523dfda3577273e78c5dd1b6ccc5c866)
                    mstore(0x4de0, 0x1ec402eb007864661943bbd67789b5cebb28fed62f468fb5cea4d052a235c24d)
mstore(0x4e00, mload(0x36c0))
success := and(eq(staticcall(gas(), 0x7, 0x4dc0, 0x60, 0x4dc0, 0x40), 1), success)
mstore(0x4e20, mload(0x4d40))
                    mstore(0x4e40, mload(0x4d60))
mstore(0x4e60, mload(0x4dc0))
                    mstore(0x4e80, mload(0x4de0))
success := and(eq(staticcall(gas(), 0x6, 0x4e20, 0x80, 0x4e20, 0x40), 1), success)
mstore(0x4ea0, 0x2cfd15455dd51f1a862d06b7ff30ac8721fb1e7c602cf6e9e912009879905e70)
                    mstore(0x4ec0, 0x1213a177d18f1274d9f907da7863c600f3258990cf16fd96c0a64482bc3cf30d)
mstore(0x4ee0, mload(0x36e0))
success := and(eq(staticcall(gas(), 0x7, 0x4ea0, 0x60, 0x4ea0, 0x40), 1), success)
mstore(0x4f00, mload(0x4e20))
                    mstore(0x4f20, mload(0x4e40))
mstore(0x4f40, mload(0x4ea0))
                    mstore(0x4f60, mload(0x4ec0))
success := and(eq(staticcall(gas(), 0x6, 0x4f00, 0x80, 0x4f00, 0x40), 1), success)
mstore(0x4f80, mload(0x540))
                    mstore(0x4fa0, mload(0x560))
mstore(0x4fc0, mload(0x3700))
success := and(eq(staticcall(gas(), 0x7, 0x4f80, 0x60, 0x4f80, 0x40), 1), success)
mstore(0x4fe0, mload(0x4f00))
                    mstore(0x5000, mload(0x4f20))
mstore(0x5020, mload(0x4f80))
                    mstore(0x5040, mload(0x4fa0))
success := and(eq(staticcall(gas(), 0x6, 0x4fe0, 0x80, 0x4fe0, 0x40), 1), success)
mstore(0x5060, mload(0x580))
                    mstore(0x5080, mload(0x5a0))
mstore(0x50a0, mload(0x3720))
success := and(eq(staticcall(gas(), 0x7, 0x5060, 0x60, 0x5060, 0x40), 1), success)
mstore(0x50c0, mload(0x4fe0))
                    mstore(0x50e0, mload(0x5000))
mstore(0x5100, mload(0x5060))
                    mstore(0x5120, mload(0x5080))
success := and(eq(staticcall(gas(), 0x6, 0x50c0, 0x80, 0x50c0, 0x40), 1), success)
mstore(0x5140, mload(0x5c0))
                    mstore(0x5160, mload(0x5e0))
mstore(0x5180, mload(0x3740))
success := and(eq(staticcall(gas(), 0x7, 0x5140, 0x60, 0x5140, 0x40), 1), success)
mstore(0x51a0, mload(0x50c0))
                    mstore(0x51c0, mload(0x50e0))
mstore(0x51e0, mload(0x5140))
                    mstore(0x5200, mload(0x5160))
success := and(eq(staticcall(gas(), 0x6, 0x51a0, 0x80, 0x51a0, 0x40), 1), success)
mstore(0x5220, mload(0x600))
                    mstore(0x5240, mload(0x620))
mstore(0x5260, mload(0x3760))
success := and(eq(staticcall(gas(), 0x7, 0x5220, 0x60, 0x5220, 0x40), 1), success)
mstore(0x5280, mload(0x51a0))
                    mstore(0x52a0, mload(0x51c0))
mstore(0x52c0, mload(0x5220))
                    mstore(0x52e0, mload(0x5240))
success := and(eq(staticcall(gas(), 0x6, 0x5280, 0x80, 0x5280, 0x40), 1), success)
mstore(0x5300, mload(0x4a0))
                    mstore(0x5320, mload(0x4c0))
mstore(0x5340, mload(0x3780))
success := and(eq(staticcall(gas(), 0x7, 0x5300, 0x60, 0x5300, 0x40), 1), success)
mstore(0x5360, mload(0x5280))
                    mstore(0x5380, mload(0x52a0))
mstore(0x53a0, mload(0x5300))
                    mstore(0x53c0, mload(0x5320))
success := and(eq(staticcall(gas(), 0x6, 0x5360, 0x80, 0x5360, 0x40), 1), success)
mstore(0x53e0, mload(0xae0))
                    mstore(0x5400, mload(0xb00))
mstore(0x5420, mload(0x3da0))
success := and(eq(staticcall(gas(), 0x7, 0x53e0, 0x60, 0x53e0, 0x40), 1), success)
mstore(0x5440, mload(0x5360))
                    mstore(0x5460, mload(0x5380))
mstore(0x5480, mload(0x53e0))
                    mstore(0x54a0, mload(0x5400))
success := and(eq(staticcall(gas(), 0x6, 0x5440, 0x80, 0x5440, 0x40), 1), success)
mstore(0x54c0, mload(0xb20))
                    mstore(0x54e0, mload(0xb40))
mstore(0x5500, mload(0x3de0))
success := and(eq(staticcall(gas(), 0x7, 0x54c0, 0x60, 0x54c0, 0x40), 1), success)
mstore(0x5520, mload(0x5440))
                    mstore(0x5540, mload(0x5460))
mstore(0x5560, mload(0x54c0))
                    mstore(0x5580, mload(0x54e0))
success := and(eq(staticcall(gas(), 0x6, 0x5520, 0x80, 0x5520, 0x40), 1), success)
mstore(0x55a0, mload(0xb60))
                    mstore(0x55c0, mload(0xb80))
mstore(0x55e0, mload(0x3e20))
success := and(eq(staticcall(gas(), 0x7, 0x55a0, 0x60, 0x55a0, 0x40), 1), success)
mstore(0x5600, mload(0x5520))
                    mstore(0x5620, mload(0x5540))
mstore(0x5640, mload(0x55a0))
                    mstore(0x5660, mload(0x55c0))
success := and(eq(staticcall(gas(), 0x6, 0x5600, 0x80, 0x5600, 0x40), 1), success)
mstore(0x5680, mload(0xba0))
                    mstore(0x56a0, mload(0xbc0))
mstore(0x56c0, mload(0x3e60))
success := and(eq(staticcall(gas(), 0x7, 0x5680, 0x60, 0x5680, 0x40), 1), success)
mstore(0x56e0, mload(0x5600))
                    mstore(0x5700, mload(0x5620))
mstore(0x5720, mload(0x5680))
                    mstore(0x5740, mload(0x56a0))
success := and(eq(staticcall(gas(), 0x6, 0x56e0, 0x80, 0x56e0, 0x40), 1), success)
mstore(0x5760, mload(0xb20))
                    mstore(0x5780, mload(0xb40))
mstore(0x57a0, mload(0x3920))
success := and(eq(staticcall(gas(), 0x7, 0x5760, 0x60, 0x5760, 0x40), 1), success)
mstore(0x57c0, mload(0xae0))
                    mstore(0x57e0, mload(0xb00))
mstore(0x5800, mload(0x5760))
                    mstore(0x5820, mload(0x5780))
success := and(eq(staticcall(gas(), 0x6, 0x57c0, 0x80, 0x57c0, 0x40), 1), success)
mstore(0x5840, mload(0xb60))
                    mstore(0x5860, mload(0xb80))
mstore(0x5880, mload(0x3b40))
success := and(eq(staticcall(gas(), 0x7, 0x5840, 0x60, 0x5840, 0x40), 1), success)
mstore(0x58a0, mload(0x57c0))
                    mstore(0x58c0, mload(0x57e0))
mstore(0x58e0, mload(0x5840))
                    mstore(0x5900, mload(0x5860))
success := and(eq(staticcall(gas(), 0x6, 0x58a0, 0x80, 0x58a0, 0x40), 1), success)
mstore(0x5920, mload(0xba0))
                    mstore(0x5940, mload(0xbc0))
mstore(0x5960, mload(0x3ca0))
success := and(eq(staticcall(gas(), 0x7, 0x5920, 0x60, 0x5920, 0x40), 1), success)
mstore(0x5980, mload(0x58a0))
                    mstore(0x59a0, mload(0x58c0))
mstore(0x59c0, mload(0x5920))
                    mstore(0x59e0, mload(0x5940))
success := and(eq(staticcall(gas(), 0x6, 0x5980, 0x80, 0x5980, 0x40), 1), success)
mstore(0x5a00, mload(0x56e0))
                    mstore(0x5a20, mload(0x5700))
mstore(0x5a40, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x5a60, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x5a80, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x5aa0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x5ac0, mload(0x5980))
                    mstore(0x5ae0, mload(0x59a0))
mstore(0x5b00, 0x12ee94670f94f3d1885db46e73a4353c0214623cf981a0ad5332f7f0ad1e5eb9)
            mstore(0x5b20, 0x1bdc4273c4f356634bbfa6082d71463cf3d107d53db743a341f955b6f36ac2e1)
            mstore(0x5b40, 0x16b0d5ad3068df7e77867107277238c81a0f4a617a979c48fe7abeacbe21dfa6)
            mstore(0x5b60, 0x299c12aba5858dfe05dda0f9f6fbe8d9f0d97dacd6cccab6af8fadb3c80fc811)
success := and(eq(staticcall(gas(), 0x8, 0x5a00, 0x180, 0x5a00, 0x20), 1), success)
success := and(eq(mload(0x5a00), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }
